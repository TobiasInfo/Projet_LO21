@startuml


enum Type
enum Extension
enum Couleur
class Partie
class Jeu
class Monument
class Reserve
class Joueur
class Pile_Etablissement
class Pioche
class Etablissement

enum Type{
aucun
agriculture
elevage
ressources
maritime
commerce
industrie
maraichage
entreprise
restauration
spécial
}
enum Couleur {
bleu
vert
rouge
violet
}
enum Extension {
Aucune
Marina
GreenValley
Deluxe
}


class Jeu{
-extension : Extension
-condition_de_victoire : size_t
-nb_joueurs_MAX : size_t
-nb_pile_reserve_MAX : size_t
-nb_lignes_reserve_MAX : size_t
-nb_colonnes_reserve_MAX : size_t
-nbEtablissements_Depart : size_t
-nbEtablissements : size_t {nb d etablissements DIFFERENTS}
-nbMonuments : size_t {nb de monuments DIFFERENTS}
-liste_etablissements[] : const Etablissement* 
-liste_monuments[] : const Monument* 
{nb de monuments à construire pour gagner}
-liste_etablissements_depart[] : const Etablissement*
-nbCartes : size_t
}
Jeu : +Jeu(extension : Extension)
Jeu : +Jeu(Extension e = Extension::Aucune, const size_t& cdv = 4, size_t nbj = 4,size_t nbpr = 15, size_t nblr = 3,
Jeu : size_t nbcr = 5, size_t nbed = 2, size_t nbe = 15, size_t nbm = 4, size_t nbc = 108)
Jeu : + ~Jeu()=default

Jeu : +getExtension() const: Extension
Jeu : +getCondition_de_victoire() const: size_t
Jeu : +getNb_joueurs_MAX() const: size_t
Jeu : +getNb_pile_reserve_MAX() const: size_t
Jeu : +getNb_lignes_reserve_MAX() const: size_t
Jeu : +getNb_colonnes_reserve_MAX() const: size_t
Jeu : +getNbEtablissements_Depart() const: size_t
Jeu : +getNbEtablissements() const: size_t
Jeu : +getNbMonuments() const: size_t
Jeu : +getNbCartes() const: size_t
Jeu : +getMonument() const : const Monument**
Jeu : +getEtablissements() const : const Etablissement**
Jeu : +getEtablissementsDepart() const : const Etablissement** 
Jeu : +getEtablissementFromName(const string& name)const : const Etablissement* 

Jeu : +afficher(std::ostream& f = std::cout) const : void
Jeu : +printE_D(std::ostream& f = cout) const : void
Jeu : +printE(std::ostream& f = cout) const : void
Jeu : +printM(std::ostream& f = cout) const : void

class Etablissement{
 -nom : const string {KEY}
 -effet : const string
 -couleur : Couleur
 -prix : unsigned int
 -num_de : vector<unsigned int>
 -type : Type
 -montant_effet : unsigned int
 -isSpecial : bool
 -nb_exemplaires : unsigned int
}
Etablissement : +Etablissement(nom1 : const string&, effet1 : const string&,couleur1 : Couleur,prix1 : unsigned int,
Etablissement : num_de1 : vector<unsigned int>, type1 : Type, montant_effet1 : unsigned int, isSpecial1 : bool)
Etablissement : + ~Etablissement()=default

Etablissement : +getNom() const : string
Etablissement : +getEffet() const : string
Etablissement : +getCouleur() const : Couleur
Etablissement : +getPrix() const : unsigned int
Etablissement : +getNumDe() const : vector<unsigned int>
Etablissement : +getType() const : Type
Etablissement : +getMontant() const : unsigned int
Etablissement : +getNbExemplaires() const : unsigned int 
Etablissement : +getIsSpecial()const : bool

Etablissement : +estActif(n : unsigned int) : bool
Etablissement : +estSpecial() : bool
Etablissement : +afficher(std::ostream& f= std::cout) const : virtual void
Etablissement : +operator==(Etablissement e1)const : bool
Etablissement : +operator!=(Etablissement e1)const : bool

class Etablissement_Violet{
 -payeur : bool
} 
'  TODO : Modifier l'ordre des types
Etablissement_Violet : +Etablissement_Violet(const string& nom1, const string& effet1, Couleur couleur1,unsigned int prix1,
Etablissement_Violet : vector<unsigned int> num_de1, Type type1,unsigned int montant_effet1,bool isSpecial1,bool payeur1);

Etablissement_Violet : +getPayeur() const : bool

Etablissement_Violet : +afficher(std::ostream& f= std::cout) const : void


class Etablissement_VertTE{
  -type_effet : const Type 
}
Etablissement_VertTE : +Etablissement_VertTE(const string& nom1, const string& effet1, Couleur couleur1,unsigned int prix1,    
Etablissement_VertTE : vector<unsigned int> num_de1, Type type1, unsigned int montant_effet1,bool isSpecial1, Type type_effet1);

Etablissement_VertTE : +getTypeEffet() const : Type 

Etablissement_VertTE : +afficher(std::ostream& f= std::cout) const : void

class Carte_Monument {
 -monument : *Monument
 -construit : bool
}
Carte_Monument : +Carte_Monument(const Monument *mo, bool construct = false)
Carte_Monument : + ~Carte_Monument() = default

Carte_Monument : +getMonument() const : const Monument* 

Carte_Monument : +estConstruit() const:bool
Carte_Monument : +construire()


class  Joueur{
 -id : int
 -$nombre_actuel : int
 -pseudo : string
 -de : 1..2
 -compte : int
-monuments : vector<Carte_Monument *> 
-pileRouge : vector<Pile_Etablissement *>
-pileBleu : vector<Pile_Etablissement *>
-pileVert : vector<Pile_Etablissement *>
-pileViolet : vector<Pile_Etablissement *>
}
Joueur : +Joueur(const Jeu* jeu)
Joueur : + ~Joueur()

Joueur : +getNbDes() const : int
Joueur : +getCompte() const : int
Joueur : +getNombreMonumentsConstruits() const : int
Joueur : +$getNbMaxJoueurs() : int
Joueur : +getMonuments() const : const vector<Carte_Monument *> &
Joueur : +getPileRouge() const : const vector<Pile_Etablissement *> & 
Joueur : +getPileBleu() const : const vector<Pile_Etablissement *> &
Joueur : +getPileVert() const : const vector<Pile_Etablissement *> &
Joueur : +getPileViolet() const : const vector<Pile_Etablissement *> &

Joueur : +setPseudo(string pseudo) : void
Joueur : +setNbDes() : void
Joueur : +setCompte(int montant) : void

Joueur : +ajouter_etablissement(const Etablissement *e) : void
Joueur : +ajouterMontant(int montant) : void
Joueur : +retirer_etablissement(const Etablissement *e) : void
Joueur : +victoire() const : bool
Joueur : +lancerDes(int desALancer)const : int
Joueur : +printJoueur(ostream &f = std::cout) const : void


abstract Monument {
 -nom : const string {KEY}
 -effet : const string
 -prix : const unsigned int
 -nb_exemplaires : const unsigned int
}
Monument : +Monument(nom : string&, effet : string&, prix : const unsigned int)
Monument : + ~Monument() = default
Monument : +Monument(const Monument& m) = delete

Monument : +getNom() const : string
Monument : +getEffet() const : string
Monument : +getPrix() const : unsigned int
Monument : +getExemplaire() const : unsigned int

Monument : +operator=(const Monument& m) = delete


class Pile_Etablissement{
 -etablissement :*Etablissement
 -effectif : unsigned int
}
Pile_Etablissement : +Pile_Etablissement(const Etablissement *et, unsigned int ef = 1)
Pile_Etablissement : +Pile_Etablissement() = default
Pile_Etablissement : + ~Pile_Etablissement() = default

Pile_Etablissement : +getEtablissement() const : const Etablissement * 
Pile_Etablissement : +getEffectif() const : unsigned int 

Pile_Etablissement : +retirerCarte(unsigned int nb_cartes = 1) : void
Pile_Etablissement : +ajouterCarte(unsigned int nb_cartes = 1) : void
Pile_Etablissement : +operator+(Pile_Etablissement &p) : Pile_Etablissement& 



class Pioche{
 -etablissements :*Pile_Etablissement[]
  -nb_etablissements : unsigned int 
  -nb_piles : unsigned int 
  -piles_etablissement : Pile_Etablissement* 
}
Pioche : +Pioche(const Jeu& jeu)
Pioche : + ~Pioche()

Pioche : +getNb_etablissements() const : unsigned int 
Pioche : +getNb_piles() const : unsigned int 
Pioche : +getPiles_etablissement() const : Pile_Etablissement*
Pioche : +getRandomEtablissement() const : const Etablissement& 
Pioche : +getIndexPile(const Etablissement& etablissement)const : unsigned int 

Pioche : +afficher()const : void
Pioche : +retirer_Etablissement(const Etablissement& etablissement, unsigned int quantite= 1) : void

class  Reserve{
    -nb_etablissements : int 
    -nb_piles : int 
    -liste_etablissements : Pile_Etablissement* 
}
Reserve : +Reserve(Pioche& p);
Reserve : +Reserve(Jeu& j);
Reserve : + ~Reserve();

Reserve : +getNbPile() const : int 
Reserve : +getNbEtablissements() const : int 
Reserve : +getListeEtablissement() const : Pile_Etablissement* 

Reserve : +retirer_etablissement(const Etablissement& etablissement) : void 
Reserve : +ajouter_etablissement(const Etablissement& etablissement) : void 


class  Partie{
 -manche : int
 -num_de :int
 -nb_joueurs : int
 -nb_monuments :int
 -nb_etablissements :int
 -joueur_actif : int
 -jeu : Jeu
 -joueurs1 : vector<Joueur*>
 -reserve : Reserve
}
Partie : + Partie()
Partie : + ~Partie()

Partie : +initialisation()
Partie : +distribuer()
Partie : +joueur_next()
Partie : +tour_joueur(joueur : Joueur)
Partie : +regarder_etablissements (joueur : Joueur, couleur : Couleur)
Partie : +application_regle_standard (couleur : Couleur)
Partie : +application_regle_speciale (pile_joueur : Pile)
Partie : +transaction_pièce(émetteur : Joueur, destinataire : Joueur, montant : int)
Partie : +transaction_carte(émetteur : Joueur, destinataire : Joueur, pile : Pile)
Partie : +achat_carte (joueur : Joueur, pile_reserve : Pile) : bool
Partie : +construire_monument(const Monument* monument_choisi) : bool







Etablissement <|-- Etablissement_Violet : "est_un"
Etablissement <|-- Etablissement_VertTE : "est_un"
Jeu "1" <--o Partie:"gère"
Reserve "1" <--o Partie:"gère"
Pioche "1" <--o Partie:"gère"
Partie "1..*" <-- "2..4" Joueur :"joue"
Jeu "1" *-- Monument
Jeu "1" *-- Etablissement
Joueur o-- "4..6" Carte_Monument
Joueur  o-- "2..*" Pile_Etablissement
Reserve o-- "15..*" Pile_Etablissement
Etablissement  "1"<-- "*" Pile_Etablissement : "est une pile d'exemplaires de"
Monument "1" <-- "*" Carte_Monument :"est un exemplaire de"
@enduml